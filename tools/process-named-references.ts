import * as fs from 'fs';
import * as path from 'path';
import * as namedReferences from '../src/named-references.source.json';

const getObjectEntries = Object.entries as <T>(obj: T) => [keyof T, T[keyof T]][];

type Level = keyof typeof namedReferences;
interface LevelData {
    entities: Record<string, string>;
    characters: Record<string, string>;
}

const result: {[key in Level]?: LevelData} = {};

const regExpStart = '/';
const regExpEnd = '/g';
const regExpStartBody = '&(?:';
const regExpCommon = '#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)';
const regExpEndBody = ';?';

const bodyRegExps: [string, string][] = [];

for (const [level, entityInfos] of getObjectEntries(namedReferences)) {
    const conflictingBodyRegExpNamedReferences: string[] = [];
    const bodyRegExpNamedReferences: string[] = [];
    const levelData: LevelData = {entities: {}, characters: {}};
    const entities: string[] = Object.keys(entityInfos);
    for (const [entity, {characters}] of getObjectEntries(entityInfos)) {
        levelData.entities[entity] = characters;
        levelData.characters[characters] = entity;
        if (!entity.endsWith(';')) {
            bodyRegExpNamedReferences.push(entity.slice(1));
        } else {
            for (const otherEntity of entities) {
                if (otherEntity !== entity && entity.startsWith(otherEntity)) {
                    conflictingBodyRegExpNamedReferences.push(entity);
                }
            }
        }
    }
    result[level] = levelData;
    bodyRegExpNamedReferences.push(regExpCommon);
    bodyRegExps.push([
        level,
        regExpStart +
            conflictingBodyRegExpNamedReferences
                .concat(regExpStartBody + bodyRegExpNamedReferences.join('|') + regExpEndBody)
                .join('|') +
            regExpEnd
    ]);
}

const processedNamedReferences = `// This file is autogenerated by tools/process-named-references.ts
/* eslint-disable */

export type NamedReferences = {
    [K in ${Object.keys(result)
        .map((level) => `'${level}'`)
        .join(' | ')}]: {
        entities: Record<string, string>;
        characters: Record<string, string>;
    }
};
export const bodyRegExps = {
    ${bodyRegExps.map(([level, regExpStart]) => `${level}: ${regExpStart}`).join(',\n    ')}
};
export const namedReferences: NamedReferences = ${JSON.stringify(result, null, 4)};\n`;

fs.writeFileSync(path.join(__dirname, '..', 'src', 'named-references.ts'), processedNamedReferences);
